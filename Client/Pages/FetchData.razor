@page "/fetchdata"
@using BlazorDemo.Shared

@using Fluxor
@using BlazorDemo.Client.Shared.Store.FetchData
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<FetchDataState> _fetchDataState
@inject IDispatcher _dispatcher

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_fetchDataState.Value.IsLoading)
{
    <p><em>Loading...</em></p>
}
else if (!string.IsNullOrEmpty(_fetchDataState.Value.Error))
{
    <p><strong>Error: @_fetchDataState.Value.Error</strong></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _fetchDataState.Value.Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    protected override void OnInitialized()
    {
        _dispatcher.Dispatch(new FetchDataAction());
        base.OnInitialized();
    }
}
